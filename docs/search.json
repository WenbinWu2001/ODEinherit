[{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://github.com/WenbinWu2001/ODEinherit/articles/ODEinherit.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"ODEinherit","text":"tutorial presents toy example ODEinherit, using dataset paper estimate inheritance mother daughter cells. successful installation ODEinherit required. See last section article list system package dependencies used create tutorial. single mother–daughter cell pair, pipeline complete 15 minutes.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/articles/ODEinherit.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"ODEinherit","text":"present workflow single mother–daughter cell pair, pair used create Figure 2 paper. See ?cell_lineage_data details dataset. Step 0: Load package select mother–daughter cell pair Following conventions, time series referred “trajectories”. Simple code plot trajectories (note plot paper, trajectories centered mean 0) Following convention, refer time series “trajectories.” code extracts plots trajectories selected cells. (Note: paper, trajectory centered mean 0; , omit centering clearer illustration.)  Step 1: Network estimation KernelODE begin two numeric matrices, Y_M Y_D, representing mother daughter cells. Rows correspond time points, columns correspond protein variables. ODE regulatory network cell estimated separately using KernelODE. applying KernelODE, : - Remove portion trajectory cell birth. - Standardize observation time points interval [0, 1] cell. - Remove linear trend time series adjust time effects. Step 1 KernelODE, fit cubic smoothing splines obtain smoothed trajectory estimates. Step 2, estimate ODE regulatory networks within RKHS modeling framework. example, use first-order Mat'ern kernel. See original KernelODE paper details algorithm. easily define pipeline network estimation: now apply pipeline separately mother daughter cells obtain respective regulatory networks. time-consuming step pipeline. Step 2: Evaluate networks via daughter trajectory recovery refit KernelODE recover daughter trajectories using mother-derived daughter-derived networks, respectively, evaluate well explains variation daughter trajectories. Goodness--fit quantified using heuristic R2R^2 metric. now plot reconstructed daughter trajectories using network. Caveat: refitted trajectories returned refit_kernel_ODE() exclude portion prior cell birth, portion removed passed pipeline.  Step 3: Calculate inheritance score trajectory recovery metrics extract R2R^2 metrics (R2(M→D)R^{2(M \\D)} R2(D→D)R^{2(D \\D)}) calculate inheritance score π(M→D)=R2(M→D)R2(D→D)\\pi^{(M \\D)} = \\frac{R^{2(M \\D)}}{R^{2(D \\D)}} value capped 1.","code":"rm(list = ls()) set.seed(1) library(ODEinherit)  cell_lineage_data <- ODEinherit::cell_lineage_data names(cell_lineage_data) #> [1] \"metadata\"    \"time_series\"  time_series <- cell_lineage_data$time_series metadata <- cell_lineage_data$metadata var_names <- names(time_series) # extract trajectories by specifying cell id idx_M <- which(metadata$cell_id == \"3-20-1\") idx_D <- which(metadata$cell_id == \"3-20-17\")  # birth time point indices (row indices of matrices in `time_series`) btp_idx_M <- metadata$cell_birth_timepoint[idx_M] btp_idx_D <- metadata$cell_birth_timepoint[idx_D]  # reshape data to the dimension: (# total time points, # variables) Y_M_full <- sapply(time_series, function(mat){mat[idx_M,]}) Y_D_full <- sapply(time_series, function(mat){mat[idx_D,]})  dim(Y_M_full) #> [1] 240   6 # plot the trajectories of the first variable var_idx <- 1 yj_M <- Y_M_full[,var_idx] yj_D <- Y_D_full[,var_idx]  par(mfrow = c(1,1)) time_grid <- 1:ncol(time_series[[1]]) plot(NA, type = \"n\",      main = paste0(\"Trajectory plot of variable \", var_idx, \" (\", var_names[var_idx], \")\"),      xlab = \"Time index\", ylab = \"Value\",      xlim = range(time_grid, na.rm = T),       ylim = range(c(yj_M, yj_D), na.rm = T)) lines(time_grid, yj_M,        lty = 1, col = \"darkred\") lines(time_grid, yj_D,        lty = 1, col = \"darkgreen\") legend(\"topright\",         legend = c(\"Mother\", \"Daughter\"),        lty = 1,        col = c(\"darkred\", \"darkgreen\"),        cex = 0.8) # remove the pre-birth portion Y_M <- Y_M_full[btp_idx_M:nrow(Y_M_full),] Y_D <- Y_D_full[btp_idx_D:nrow(Y_D_full),] # Note: Y_M and Y_D now start at each cell’s birth (corresponding to their first row).  # standardize observation time to [0, 1] for each cell n_M <- nrow(Y_M) obs_time_M <- 1/n_M * (1:n_M) n_D <- nrow(Y_D) obs_time_D <- 1/n_D * (1:n_D)  # remove linear trend for each variable linear_trend_M <- matrix(NA, nrow = nrow(Y_M), ncol = ncol(Y_M)) linear_trend_D <- matrix(NA, nrow = nrow(Y_D), ncol = ncol(Y_D))  for (j in 1:ncol(Y_M)){   yj <- Y_M[,j]   lt_fitted <- lm(yj ~ obs_time_M)$fitted.values  # fitted linear trend   yj <- yj - lt_fitted  # remove linear trend      Y_M[,j] <- yj   linear_trend_M[,j] <- lt_fitted } for (j in 1:ncol(Y_D)){   yj <- Y_D[,j]   lt_fitted <- lm(yj ~ obs_time_D)$fitted.values  # fitted linear trend   yj <- yj - lt_fitted  # remove linear trend      Y_D[,j] <- yj   linear_trend_D[,j] <- lt_fitted } kernelODE_pipeline <- function(Y,                                 obs_time,                                 kernel,                                 kernel_params,                                prune_thres = 0.05,  # network pruning threshold                                depth = NULL  # maximum number of regulator edges to prune for each variable                                ){   tt <- 0.001*(1:1000)  # time grid for numerical integration, does not include 0      # KernelODE step 1: smooth the observed trajectories   res_step1 <- ODEinherit::kernelODE_step1(Y = Y,                                            obs_time = obs_time,                                            tt = tt)   yy_smth <- res_step1$yy_smth      # KernelODE step 2: estimate the derivative functions Fj's   res_step2 <- ODEinherit::kernelODE_step2(Y = Y,                                            obs_time = obs_time,                                            yy_smth = yy_smth,                                            tt = tt,                                            kernel = kernel,                                            kernel_params = kernel_params,                                            interaction_term = FALSE,  # without interaction                                            verbose = 0)      network_est_original <- res_step2$network_est      # prune the network   res_prune <- ODEinherit::prune_network(network_original = network_est_original,  # network to prune                                          prune_thres = prune_thres,                                          depth = depth,                                          Y_list = list(Y),  # here we prune it cellwise                                          yy_smth_list = list(yy_smth),                                            obs_time_list = list(obs_time),                                          tt = tt,                                          kernel = kernel,                                          kernel_params_list = list(kernel_params),                                          interaction_term = FALSE,                                          parallel = TRUE,                                          verbose = 0)      network_est_pruned <- res_prune$network_pruned      return (list(network_est_pruned = network_est_pruned,                yy_smth = yy_smth,                tt = tt)) } # kernel configuration kernel <- \"matern\" kernel_params <- list(list(lengthscale=1))  # recycled for all variables, used for both mother and daughter cells  # run the pipeline separately for mother and daughter res_KernelODE_M <- kernelODE_pipeline(Y = Y_M,                                       obs_time = obs_time_M,                                       kernel = kernel,                                       kernel_params = kernel_params) #> Note: R2 increases when removing these edges::  1->1  #> No pruning is done. Network is already pruned to the simplest. res_KernelODE_D <- kernelODE_pipeline(Y = Y_D,                                       obs_time = obs_time_D,                                       kernel = kernel,                                       kernel_params = kernel_params) #> Note: R2 increases when removing these edges::  4->2, 6->2, 1->4, 2->4, 3->4, 2->5, 3->5, 5->5, 2->6, 3->6, 5->6  #> Note: R2 increases when removing these edges::  2->2  #> No pruning is done. Network is already pruned to the simplest.  # extract results network_est_M <- res_KernelODE_M$network_est_pruned network_est_D <- res_KernelODE_D$network_est_pruned yy_smth_M <- res_KernelODE_M$yy_smth yy_smth_D <- res_KernelODE_D$yy_smth tt_M <- res_KernelODE_M$tt tt_D <- res_KernelODE_D$tt KODE_refit_MtoD <- ODEinherit::refit_kernel_ODE(Y = Y_D,  # target: daughter's observed trajectories                                                 obs_time = obs_time_D,                                                 yy_smth = yy_smth_D,                                                 tt = tt_D,                                                 kernel = kernel, # same config as used for network estimation                                                 kernel_params = kernel_params,  # same config as used for network estimation                                                 interaction_term = FALSE,                                                 adj_matrix = network_est_M)  # use mother network KODE_refit_DtoD <- ODEinherit::refit_kernel_ODE(Y = Y_D,  # target: daughter's observed trajectories                                                 obs_time = obs_time_D,                                                 yy_smth = yy_smth_D,                                                 tt = tt_D,                                                 kernel = kernel,                                                  kernel_params = kernel_params,                                                   interaction_term = FALSE,                                                 adj_matrix = network_est_D)  # use daughter network par(mfrow = c(1,2))  # extract refitted daughter trajectories (both are /daughter/ trajectories!) Y_refit_MtoD <- KODE_refit_MtoD$Y_refit Y_refit_DtoD <- KODE_refit_DtoD$Y_refit  # add the linear trend back Y_refit_MtoD <- Y_refit_MtoD + linear_trend_D Y_refit_DtoD <- Y_refit_DtoD + linear_trend_D  # pad NA for the pre-birth portion Y_refit_MtoD <- rbind(matrix(NA, nrow = btp_idx_D-1, ncol = ncol(Y_refit_MtoD)), Y_refit_MtoD) Y_refit_DtoD <- rbind(matrix(NA, nrow = btp_idx_D-1, ncol = ncol(Y_refit_DtoD)), Y_refit_DtoD)  # select a variable to plot var_idx <- 1 yj_MtoD <- Y_refit_MtoD[,var_idx] yj_DtoD <- Y_refit_DtoD[,var_idx] yj_D <- Y_D_full[,var_idx]  # plot Mother -> Daughter recovery plot(NA, type = \"n\",      main = paste0(\"Daughter traj. reconstructed by mother network\\nVar \", var_idx, \" (\", var_names[var_idx], \")\"),      cex.main = 0.8,      xlab = \"Time index\", ylab = \"Value\",      xlim = range(time_grid, na.rm = T),       ylim = range(c(yj_MtoD, yj_D), na.rm = T)      ) lines(time_grid, yj_D,        lty = 1, col = \"darkgreen\")  # observed daughter traj lines(time_grid, yj_MtoD,        lty = 2, col = \"darkred\")  # daughter traj recovered by mother legend(\"topright\",         legend = c(\"obs. D.\", \"M to D\"),        lty = c(1, 2),        col = c(\"darkgreen\", \"darkred\"),        cex = 0.8)  # plot Daughter -> Daughter recovery plot(NA, type = \"n\",      main = paste0(\"Daughter traj. reconstructed by its own network\\nVar \", var_idx, \" (\", var_names[var_idx], \")\"),      cex.main = 0.8,      xlab = \"Time index\", ylab = \"Value\",      xlim = range(time_grid, na.rm = T),       ylim = range(c(yj_DtoD, yj_D), na.rm = T)      ) lines(time_grid, yj_D,        lty = 1, col = \"darkgreen\")  # observed daughter traj lines(time_grid, yj_DtoD,        lty = 2, col = \"darkgreen\")  # daughter traj recovered by itself legend(\"topright\",         legend = c(\"obs. D.\", \"D to D\"),        lty = c(1, 2),        col = c(\"darkgreen\", \"darkgreen\"),        cex = 0.8) R2_MtoD <- KODE_refit_MtoD$metrics$R2 R2_DtoD <- KODE_refit_DtoD$metrics$R2 pi_score <- min(R2_MtoD / R2_DtoD, 1)  pi_score #> [1] 0.6315346"},{"path":"https://github.com/WenbinWu2001/ODEinherit/articles/ODEinherit.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"ODEinherit","text":"following shows suggested package versions developer (GitHub username: WenbinWu2001) used developing ODEinherit package.","code":"─ Session info ───────────────────────────────────────────────────────  setting  value  version  R version 4.4.2 (2024-10-31)  os       macOS Sequoia 15.3.2  system   aarch64, darwin20  ui       RStudio  language (EN)  collate  en_US.UTF-8  ctype    en_US.UTF-8  tz       America/New_York  date     2025-08-13  rstudio  2024.12.1+563 Kousa Dogwood (desktop)  pandoc   3.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown)  quarto   1.5.57 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/quarto  ─ Packages ───────────────────────────────────────────────────────────  package     * version date (UTC) lib source  cachem        1.1.0   2024-05-16 [1] CRAN (R 4.4.1)  callr         3.7.6   2024-03-25 [1] CRAN (R 4.4.0)  cli           3.6.4   2025-02-13 [1] CRAN (R 4.4.1)  codetools     0.2-20  2024-03-31 [1] CRAN (R 4.4.2)  desc          1.4.3   2023-12-10 [1] CRAN (R 4.4.1)  devtools      2.4.5   2022-10-11 [1] CRAN (R 4.4.0)  digest        0.6.37  2024-08-19 [1] CRAN (R 4.4.1)  ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.4.0)  evaluate      1.0.3   2025-01-10 [1] CRAN (R 4.4.1)  fastmap       1.2.0   2024-05-15 [1] CRAN (R 4.4.1)  foreach       1.5.2   2022-02-02 [1] CRAN (R 4.4.0)  fs            1.6.5   2024-10-30 [1] CRAN (R 4.4.1)  glmnet        4.1-8   2023-08-22 [1] CRAN (R 4.4.0)  glue          1.8.0   2024-09-30 [1] CRAN (R 4.4.1)  htmltools     0.5.8.1 2024-04-04 [1] CRAN (R 4.4.0)  htmlwidgets   1.6.4   2023-12-06 [1] CRAN (R 4.4.0)  httpuv        1.6.15  2024-03-26 [1] CRAN (R 4.4.0)  iterators     1.0.14  2022-02-05 [1] CRAN (R 4.4.0)  knitr         1.49    2024-11-08 [1] CRAN (R 4.4.1)  later         1.4.1   2024-11-27 [1] CRAN (R 4.4.1)  lattice       0.22-6  2024-03-20 [1] CRAN (R 4.4.2)  lifecycle     1.0.4   2023-11-07 [1] CRAN (R 4.4.0)  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.4.0)  Matrix        1.7-2   2025-01-23 [1] CRAN (R 4.4.1)  memoise       2.0.1   2021-11-26 [1] CRAN (R 4.4.0)  mime          0.12    2021-09-28 [1] CRAN (R 4.4.0)  miniUI        0.1.1.1 2018-05-18 [1] CRAN (R 4.4.0)  ODEinherit  * 1.0.0   2025-08-13 [1] local  pillar        1.10.1  2025-01-07 [1] CRAN (R 4.4.1)  pkgbuild      1.4.6   2025-01-16 [1] CRAN (R 4.4.1)  pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.4.0)  pkgload       1.4.0   2024-06-28 [1] CRAN (R 4.4.0)  processx      3.8.5   2025-01-08 [1] CRAN (R 4.4.1)  profvis       0.4.0   2024-09-20 [1] CRAN (R 4.4.1)  promises      1.3.2   2024-11-28 [1] CRAN (R 4.4.1)  ps            1.8.1   2024-10-28 [1] CRAN (R 4.4.1)  purrr         1.0.4   2025-02-05 [1] CRAN (R 4.4.1)  R6            2.6.1   2025-02-15 [1] CRAN (R 4.4.1)  Rcpp          1.0.14  2025-01-12 [1] CRAN (R 4.4.1)  remotes       2.5.0   2024-03-17 [1] CRAN (R 4.4.1)  rlang         1.1.5   2025-01-17 [1] CRAN (R 4.4.1)  rmarkdown     2.29    2024-11-04 [1] CRAN (R 4.4.1)  rprojroot     2.0.4   2023-11-05 [1] CRAN (R 4.4.1)  rstudioapi    0.17.1  2024-10-22 [1] CRAN (R 4.4.1)  sessioninfo   1.2.3   2025-02-05 [1] CRAN (R 4.4.1)  shape         1.4.6.1 2024-02-23 [1] CRAN (R 4.4.1)  shiny         1.10.0  2024-12-14 [1] CRAN (R 4.4.1)  survival      3.8-3   2024-12-17 [1] CRAN (R 4.4.1)  tibble        3.2.1   2023-03-20 [1] CRAN (R 4.4.0)  urlchecker    1.0.1   2021-11-30 [1] CRAN (R 4.4.0)  usethis       3.1.0   2024-11-26 [1] CRAN (R 4.4.1)  vctrs         0.6.5   2023-12-01 [1] CRAN (R 4.4.0)  xfun          0.50    2025-01-07 [1] CRAN (R 4.4.1)  xtable        1.8-4   2019-04-21 [1] CRAN (R 4.4.0)  yaml          2.3.10  2024-07-26 [1] CRAN (R 4.4.1)"},{"path":"https://github.com/WenbinWu2001/ODEinherit/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wenbin Wu. Author, maintainer. Kevin Z. Lin. Contributor.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wu W (2025). ODEinherit: Measuring regulatory network inheritance dividing yeast cells using ordinary differential equations. R package version 1.0.0, https://github.com/WenbinWu2001/ODEinherit.","code":"@Manual{,   title = {ODEinherit: Measuring regulatory network inheritance in dividing yeast cells using ordinary differential equations},   author = {Wenbin Wu},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/WenbinWu2001/ODEinherit}, }"},{"path":"https://github.com/WenbinWu2001/ODEinherit/index.html","id":"odeinherit","dir":"","previous_headings":"","what":"Measuring regulatory network inheritance in dividing yeast cells using ordinary differential equations","title":"Measuring regulatory network inheritance in dividing yeast cells using ordinary differential equations","text":"Measuring regulatory network inheritance dividing yeast cells using ordinary differential equations.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Measuring regulatory network inheritance in dividing yeast cells using ordinary differential equations","text":"can install development version ODEinherit GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"WenbinWu2001/ODEinherit\")"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/assess_recov_traj.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess trajectory recovery performance for a single cell. — assess_recov_traj","title":"Assess trajectory recovery performance for a single cell. — assess_recov_traj","text":"Computes \\(R^2\\) metrics comparing observed trajectories recovered Kernel ODE.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/assess_recov_traj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess trajectory recovery performance for a single cell. — assess_recov_traj","text":"","code":"assess_recov_traj(Y, Y_est)"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/assess_recov_traj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess trajectory recovery performance for a single cell. — assess_recov_traj","text":"Y numeric matrix dimension (n, p) containing observed trajectories cell. Y_est numeric matrix dimension (n, p) containing trajectories recovered Kernel ODE.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/assess_recov_traj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess trajectory recovery performance for a single cell. — assess_recov_traj","text":"list containing: R2 overall \\(R^2\\) value (scalar) average variable-specific \\(R^2\\) values (stored R2_per_var_vec), representing overall proportion variance explained recovered trajectories. R2_per_var_vec numeric vector length p giving variable-specific \\(R^2\\) values.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/assess_recov_traj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assess trajectory recovery performance for a single cell. — assess_recov_traj","text":"\\(R^2\\) metric variable \\(j\\) defined $$R_j^{2} = \\max \\left\\{ 1 - \\frac{\\mathrm{MSS}_{j,\\mathrm{res}}}{\\mathrm{MSS}_{j,\\mathrm{tot}}}, \\; 0 \\right\\},$$ $$\\mathrm{MSS}_{j,\\mathrm{res}} = \\frac{1}{n}\\sum_{=1}^n \\left( y_{ij} - \\hat{y}_{ij} \\right)^2,$$ $$\\mathrm{MSS}_{j,\\mathrm{tot}} = \\frac{1}{n}\\sum_{=1}^n \\left( y_{ij} - \\bar{y}_j \\right)^2.$$ overall \\(R^2\\) average variable-specific \\(R^2\\) values: $$R^{2} = \\frac{1}{p}\\sum_{j=1}^{p} R_j^{2}.$$","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/assess_recov_traj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess trajectory recovery performance for a single cell. — assess_recov_traj","text":"","code":"set.seed(1) obs_time <- seq(0, 1, length.out = 10) Y <- cbind(sin(2 * pi * obs_time), cos(4 * pi * obs_time)) + 0.1 * matrix(rnorm(20), 10, 2)  # each col is a variable Y_est <- sapply(1:ncol(Y), function(j){lm(Y[,j] ~ obs_time)$fitted.values})  # linear regression assess_recov_traj(Y = Y, Y_est = Y_est) #> $R2 #> [1] 0.1927641 #>  #> $R2_per_var_vec #> [1] 0.3852167627 0.0003113457 #>"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/auto_select_kernel_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically Select Kernel Parameters — auto_select_kernel_params","title":"Automatically Select Kernel Parameters — auto_select_kernel_params","text":"Currently supports data-driven bandwidth selection Gaussian kernel, following fixed settings kernels: Linear kernel: parameters. Polynomial kernel: cubic polynomial (intercept = 1, degree = 3). Matern kernel: length-scale fixed 1.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/auto_select_kernel_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically Select Kernel Parameters — auto_select_kernel_params","text":"","code":"auto_select_kernel_params(kernel, Y)"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/auto_select_kernel_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically Select Kernel Parameters — auto_select_kernel_params","text":"kernel Kernel function use. Y numeric matrix dimension (n, p), column corresponds observed trajectory variable. Rows align obs_time.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/auto_select_kernel_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically Select Kernel Parameters — auto_select_kernel_params","text":"list length p, element named list parameters specific variable (e.g., list(bandwidth = 1) Gaussian kernel). list length 1, parameter set used variables.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/auto_select_kernel_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically Select Kernel Parameters — auto_select_kernel_params","text":"","code":"set.seed(1) obs_time <- seq(0, 1, length.out = 10) Y <- cbind(sin(2 * pi * obs_time), cos(4 * pi * obs_time)) + 0.1 * matrix(rnorm(20), 10, 2)  # each col is a variable auto_select_kernel_params(\"gaussian\", Y) #> [[1]] #> [[1]]$bandwidth #> [1] 0.7237973 #>  #>  #> [[2]] #> [[2]]$bandwidth #> [1] 0.9341025 #>  #>"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/cell_lineage_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell Lineage Time Series Dataset — cell_lineage_data","title":"Cell Lineage Time Series Dataset — cell_lineage_data","text":"dataset containing cell lineage metadata time series protein expression set mother–daughter cell pairs.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/cell_lineage_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell Lineage Time Series Dataset — cell_lineage_data","text":"","code":"cell_lineage_data"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/cell_lineage_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cell Lineage Time Series Dataset — cell_lineage_data","text":"named list two elements: metadata data frame providing cell lineage timing information. Columns include: cell_id: Unique identifier cell. mother_id: Identifier mother cell; \"root\" indicates founder cell (seeded start experiment). cell_birth_timepoint: Time index cell born. corresponds column index time series matrices (excluding first column). time_series named list six protein time series matrices: Cdc10, Stb3, CLB5, Whi5, Xbp1, Tup1 matrix rows representing cells columns representing uniformly spaced time points. words, row time series protein single cell. first column cell_id, matching metadata. Values cell's birth NA.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/cell_lineage_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cell Lineage Time Series Dataset — cell_lineage_data","text":"Time series data denoised using functional principal component analysis interpolated 5× temporal resolution using local polynomial smoothing. dataset includes 25 mother cells 60 daughter cells, measured common grid 240 time points (uniformly spaced) across experiment (originally 48 time points interpolation). paper, time series also referred \"trajectories\".","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/cell_lineage_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell Lineage Time Series Dataset — cell_lineage_data","text":"","code":"data(cell_lineage_data) names(cell_lineage_data) #> [1] \"metadata\"    \"time_series\" head(cell_lineage_data$metadata) #>   cell_id mother_id cell_birth_timepoint #> 1   1-6-1      root                    5 #> 2   1-7-1      root                    5 #> 3   1-7-2      root                    5 #> 4  2-11-1      root                    5 #> 5  2-12-1      root                    5 #> 6  3-15-1      root                    5 dim(cell_lineage_data$time_series$CLB5) #> [1]  85 240"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/compute_bw_gaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Data-driven Bandwidth Selection for Gaussian Kernel — compute_bw_gaussian","title":"Data-driven Bandwidth Selection for Gaussian Kernel — compute_bw_gaussian","text":"Data-driven Bandwidth Selection Gaussian Kernel","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/compute_bw_gaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data-driven Bandwidth Selection for Gaussian Kernel — compute_bw_gaussian","text":"","code":"compute_bw_gaussian(Y)"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/compute_bw_gaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data-driven Bandwidth Selection for Gaussian Kernel — compute_bw_gaussian","text":"Y numeric matrix dimension (n, p), column corresponds observed trajectory variable. Rows align obs_time.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/compute_bw_gaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data-driven Bandwidth Selection for Gaussian Kernel — compute_bw_gaussian","text":"list length p, element named list form list(bandwidth = <value>), containing selected bandwidth corresponding variable.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/compute_bw_gaussian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data-driven Bandwidth Selection for Gaussian Kernel — compute_bw_gaussian","text":"bandwidth set median pairwise distances among sample points. number possible pairs large, Monte Carlo resampling 1,000 randomly selected pairs used approximate median. implementation adopts bandwidth selection strategy proposed references .","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/compute_bw_gaussian.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data-driven Bandwidth Selection for Gaussian Kernel — compute_bw_gaussian","text":"Mukherjee, S., Zhou, D. X., & Shawe-Taylor, J. (2006). Learning coordinate covariances via gradients. Journal Machine Learning Research, 7(3). Yang, L., Lv, S., & Wang, J. (2016). Model-free variable selection reproducing kernel Hilbert space. Journal Machine Learning Research, 17(82), 1-24.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/compute_bw_gaussian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data-driven Bandwidth Selection for Gaussian Kernel — compute_bw_gaussian","text":"","code":"set.seed(1) obs_time <- seq(0, 1, length.out = 10) Y <- cbind(sin(2 * pi * obs_time), cos(4 * pi * obs_time)) + 0.1 * matrix(rnorm(20), 10, 2)  # each col is a variable compute_bw_gaussian(Y) #> [[1]] #> [[1]]$bandwidth #> [1] 0.7237973 #>  #>  #> [[2]] #> [[2]]$bandwidth #> [1] 0.9341025 #>  #>"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/evaluate_Fj.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate \\(F_j\\) and Recovery the Trajectory for a Single Variable — evaluate_Fj","title":"Evaluate \\(F_j\\) and Recovery the Trajectory for a Single Variable — evaluate_Fj","text":"Evaluates derivative function \\(F_j\\) single variable integration grid tt recovers trajectory numerical integration, given estimates \\(b_j\\), \\(c_j\\), \\(\\theta_j\\).","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/evaluate_Fj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate \\(F_j\\) and Recovery the Trajectory for a Single Variable — evaluate_Fj","text":"","code":"evaluate_Fj(   bj,   cj,   interaction_term,   kernel,   kernel_params,   kk_array = NULL,   obs_time,   theta_j,   tt,   Yj,   yy_smth )"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/evaluate_Fj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate \\(F_j\\) and Recovery the Trajectory for a Single Variable — evaluate_Fj","text":"bj numeric scalar, giving estimated \\(b_j\\) Kernel ODE (.e., res_bj[j]). cj numeric vector length n, giving estimated \\(c_j\\) Kernel ODE (.e., res_cj[,j]). interaction_term logical value specifying whether include interaction effects model. kernel Kernel function use. kernel_params list length p, element named list parameters specific variable (e.g., list(bandwidth = 1) Gaussian kernel). list length 1, parameter set used variables. typically output auto_select_kernel_params(). kk_array Optional precomputed kernel array tt. array dimension (len, len, p) interaction_term = FALSE, (len, len, p^2) interaction_term = TRUE, len = length(tt). Providing kk_array enables reuse across variables can greatly reduce computation. obs_time numeric vector length n representing observation time points. theta_j numeric vector length p (interaction = FALSE) p^2 (interaction = TRUE), giving estimated \\(\\theta_j\\) coefficients variable \\(j\\) Kernel ODE (.e., res_theta[,j]). tt numeric vector representing finer time grid used evaluating smoothed trajectories derivatives. Yj numeric vector length n, giving observed trajectory variable \\(j\\) (.e., Y[, j]). yy_smth Numeric matrix dimension (len, p); smoothed trajectories evaluated tt (.e., output kernelODE_step1()).","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/evaluate_Fj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate \\(F_j\\) and Recovery the Trajectory for a Single Variable — evaluate_Fj","text":"list components: theta_j0 numeric scalar giving estimated initial condition variable \\(j\\). Fj_est numeric vector (length len) giving evaluated \\(F_j\\) tt. yy_est numeric vector (length len) giving recovered trajectory tt. TV_est numeric scalar giving total variation \\(\\int |F_j(t)| \\, dt\\) approximated tt.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/evaluate_Fj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate \\(F_j\\) and Recovery the Trajectory for a Single Variable — evaluate_Fj","text":"Given \\(b_j\\), \\(c_j\\), \\(\\theta_j\\), function constructs kernel-weighted integral operator grid tt evaluate \\(F_j\\), estimates initial condition \\(\\theta_{j0}\\), recovers trajectory via cumulative summation tt (first-order approximation). provided, kk_array reused avoid recomputing kernel blocks.","code":""},{"path":[]},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step1.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothing Spline Estimates (Step 1 of Kernel ODE) — kernelODE_step1","title":"Smoothing Spline Estimates (Step 1 of Kernel ODE) — kernelODE_step1","text":"Computes smoothed trajectories derivatives using cubic smoothing splines. function serves Step 1 Kernel ODE pipeline.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothing Spline Estimates (Step 1 of Kernel ODE) — kernelODE_step1","text":"","code":"kernelODE_step1(Y, obs_time, tt)"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothing Spline Estimates (Step 1 of Kernel ODE) — kernelODE_step1","text":"Y numeric matrix dimension (n, p), column corresponds observed trajectory variable. Rows align obs_time. obs_time numeric vector length n representing observation time points. tt numeric vector representing finer time grid used evaluating smoothed trajectories derivatives.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothing Spline Estimates (Step 1 of Kernel ODE) — kernelODE_step1","text":"list components: yy_smth numeric matrix dimension (length(tt), p), column contains smoothed trajectory variable evaluated tt. init_vals_smth numeric vector length p containing estimated initial values (time 0) variable. deriv_smth numeric matrix dimension (length(tt), p), column contains smoothed first order derivative variable evaluated tt.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Smoothing Spline Estimates (Step 1 of Kernel ODE) — kernelODE_step1","text":"Original implementation adapted https://github.com/ChenShizhe/GRADE","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smoothing Spline Estimates (Step 1 of Kernel ODE) — kernelODE_step1","text":"","code":"# Example usage: set.seed(1) obs_time <- seq(0, 1, length.out = 10) Y <- cbind(sin(2 * pi * obs_time), cos(4 * pi * obs_time)) + 0.1 * matrix(rnorm(20), 10, 2)  # each col is a variable tt <- seq(0, 1, length.out = 100) result <- smoother_SS(obs_time, Y, tt) #> Error in smoother_SS(obs_time, Y, tt): could not find function \"smoother_SS\" matplot(tt, result$yy_smth, type = \"l\", lty = 1, col = 1:2) #> Error: object 'result' not found"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step2.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivative Function Estimation (Step 2 of Kernel ODE) — kernelODE_step2","title":"Derivative Function Estimation (Step 2 of Kernel ODE) — kernelODE_step2","text":"function implements iterative optimization algorithm described Kernel ODE paper.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivative Function Estimation (Step 2 of Kernel ODE) — kernelODE_step2","text":"","code":"kernelODE_step2(   Y,   obs_time,   yy_smth,   tt,   kernel,   kernel_params,   interaction_term = FALSE,   theta_initial = NULL,   adj_matrix = NULL,   nzero_thres = NULL,   eval_loss = FALSE,   tol = 0.001,   max_iter = 10,   verbose = 0 )"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivative Function Estimation (Step 2 of Kernel ODE) — kernelODE_step2","text":"Y numeric matrix dimension (n, p), column corresponds observed trajectory variable. Rows align obs_time. obs_time numeric vector length n representing observation time points. yy_smth numeric matrix dimension (length(tt), p), column contains smoothed trajectory variable evaluated tt. typically output kernelODE_step1(). tt numeric vector representing finer time grid used evaluating smoothed trajectories derivatives. kernel Kernel function use. kernel_params list length p, element named list parameters specific variable (e.g., list(bandwidth = 1) Gaussian kernel). list length 1, parameter set used variables. typically output auto_select_kernel_params(). interaction_term logical value specifying whether include interaction effects model. theta_initial numeric matrix containing initial \\(\\theta_j\\) values variable start optimization: interaction_term = FALSE, theta_initial must dimensions (p, p). interaction_term = TRUE, theta_initial must dimensions (p^2, p). NULL, defaults ones. adj_matrix adjacency matrix (p × p) representing fixed regulatory network, entry (k, j) = 1 indicates variable k regulates variable j. supplied, Lasso selection performed, non-penalized regression used instead. NULL (default), set regulators (edges) selected via Lasso-type penalization. nzero_thres number 0, 1 specifying maximum proportion nonzero regulators (edges) allowed variable (.e., p * nzero_thres regulators). used adj_matrix NULL. provides faster alternative computationally expensive pruning process. eval_loss logical value specifying whether evaluate loss function iteration. tol Convergence tolerance relative improvement Frobenius norm \\(\\theta\\) matrix. max_iter Maximum number iterations optimization. verbose Integer; greater 0, prints progress messages optimization.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivative Function Estimation (Step 2 of Kernel ODE) — kernelODE_step2","text":"list components: res_theta Estimated \\(\\theta\\) values, dimensions matching theta_initial. res_best_kappa numeric vector length p selected hyperparameter \\(\\kappa\\) values \\(\\theta_j\\) estimation step. res_bj numeric vector length p estimated \\(b_j\\) values. res_cj numeric matrix (n × p) estimated \\(c_j\\) values columns. res_best_eta numeric vector length p selected hyperparameter \\(\\eta\\) values \\(F_j\\) estimation step (.e., estimating \\(b_j\\) \\(c_j\\)), chosen generalized cross-validation. res_loss_path Optional list loss values iterations (present eval_loss = TRUE). network_est Estimated regulatory network, form adjacency matrix. num_iter Number iterations performed. config List input arguments reproducibility.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernelODE_step2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Derivative Function Estimation (Step 2 of Kernel ODE) — kernelODE_step2","text":"Dai, X., & Li, L. (2022). Kernel ordinary differential equations. Journal American Statistical Association, 117(540), 1711-1725.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernel_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel Functions — kernel_functions","title":"Kernel Functions — kernel_functions","text":"Computes common kernel functions elementwise two equal-length numeric vectors. function vectorized: result position depends y1[] y2[].","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernel_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Functions — kernel_functions","text":"","code":"linear_kernel(y1, y2)  polynomial_kernel(y1, y2, intercept, degree)  gaussian_kernel(y1, y2, bandwidth)  matern_kernel(y1, y2, lengthscale)"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernel_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Functions — kernel_functions","text":"y1 numeric vector. y2 numeric vector length y1. intercept Numeric intercept \\(c\\). degree Non-negative integer degree \\(d\\). bandwidth Positive numeric bandwidth \\(\\sigma\\). lengthscale Positive numeric lengthscale \\(\\ell\\).","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernel_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel Functions — kernel_functions","text":"numeric vector length length(y1) giving kernel values pair corresponding elements y1 y2.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernel_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kernel Functions — kernel_functions","text":"following kernels provided: Linear: $$K(y_1, y_2) = y_1 y_2$$ Polynomial: $$K(y_1, y_2) = (y_1 y_2 + c)^{d},$$ intercept \\(c \\\\mathbb{R}\\) degree \\(d \\\\mathbb{N}_0\\). Gaussian (RBF): $$K(y_1, y_2) = \\exp\\left(-\\frac{(y_1 - y_2)^2}{2 \\sigma^2}\\right),$$ \\(\\sigma\\) bandwidth. Matern (\\(\\nu = 3/2\\)): $$K(y_1, y_2) = \\left(1 + \\frac{\\sqrt{3} |y_1 - y_2|}{\\ell}\\right) \\exp\\left(-\\frac{\\sqrt{3} |y_1 - y_2|}{\\ell}\\right),$$ lengthscale \\(\\ell > 0\\). Inputs must length; kernel-specific parameters must valid (e.g., positive bandwidth/lengthscale, non-negative integer degree). Inputs containing NA yield NA corresponding positions.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/kernel_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel Functions — kernel_functions","text":"","code":"linear_kernel(1:3, 4:6) #> [1]  4 10 18 polynomial_kernel(1:3, 4:6, intercept = 1, degree = 2) #> [1]  25 121 361 gaussian_kernel(1:3, 4:6, bandwidth = 1) #> [1] 0.011109 0.011109 0.011109 matern_kernel(1:3, 4:6, lengthscale = 0.5) #> [1] 0.0003493743 0.0003493743 0.0003493743"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/prune_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Prune a Network Estimated by Kernel ODE — prune_network","title":"Prune a Network Estimated by Kernel ODE — prune_network","text":"Iteratively removes edges estimated network evaluating percentage variation edge explains target variable's trajectory. Edges explaining less prune_thres pruned. process repeats depth times edges can pruned. Applicable interaction_term = FALSE. Supports pruning using multiple samples (cells) jointly, edge contributions (\\(R^2\\)) averaged across samples.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/prune_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prune a Network Estimated by Kernel ODE — prune_network","text":"","code":"prune_network(   network_original,   prune_thres = 0.05,   depth = NULL,   eval_edge_R2_pruned = FALSE,   Y_list,   yy_smth_list,   obs_time_list,   tt,   kernel,   kernel_params_list,   interaction_term,   theta_initial_list = NULL,   max_iter = 5,   tol = 0.001,   parallel = FALSE,   mc.cores = NULL,   verbose = 0 )"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/prune_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prune a Network Estimated by Kernel ODE — prune_network","text":"network_original original network (adjacency matrix) prune. prune_thres Threshold pruning. Edges explaining less proportion variation removed. depth Maximum number pruning steps per variable. Use NULL continue pruning edges meet threshold. eval_edge_R2_pruned logical value. TRUE, evaluates contribution (\\(R^2\\)) remaining edge pruned network. Y_list list observed trajectories (Y), corresponding sample (cell). See kernelODE_step2() format Y. yy_smth_list list smoothed trajectories (yy_smth). obs_time_list list standardized observation time points (obs_time). tt numeric vector representing finer time grid used evaluating smoothed trajectories derivatives. kernel Kernel function use. kernel_params_list list kernel parameter lists (kernel_params). interaction_term logical value specifying whether include interaction effects model. theta_initial_list list initial \\(\\theta_j\\) matrices iterative optimization (theta_initial). max_iter Maximum number iterations optimization. tol Convergence tolerance relative improvement Frobenius norm \\(\\theta\\) matrix. parallel logical value. TRUE, use parallel computing (Linux/macOS ). Parallelization applied variables samples. mc.cores integer specifying number cores parallel computing. Defaults one available cores. verbose Integer; greater 0, prints progress messages optimization.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/prune_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prune a Network Estimated by Kernel ODE — prune_network","text":"list components: res_prune_path History pruning steps. network_pruned Final pruned network. R2_avg_mat_pruned \\(R^2\\) contribution per edge pruned network, averaged across samples. R2_multi_arr_pruned Per-sample edge \\(R^2\\) contributions. config List pruning configuration inputs.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/refit_kernel_ODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Refit Kernel ODE with a Given Regulatory Network — refit_kernel_ODE","title":"Refit Kernel ODE with a Given Regulatory Network — refit_kernel_ODE","text":"Refits Kernel ODE model using pre-specified regulatory network, bypassing network estimation step.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/refit_kernel_ODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refit Kernel ODE with a Given Regulatory Network — refit_kernel_ODE","text":"","code":"refit_kernel_ODE(   Y,   obs_time,   yy_smth,   tt,   kernel,   kernel_params,   interaction_term,   adj_matrix,   theta_initial = NULL,   nzero_thres = NULL,   tol = 0.001,   max_iter = 10,   verbose = 0 )"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/refit_kernel_ODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refit Kernel ODE with a Given Regulatory Network — refit_kernel_ODE","text":"Y numeric matrix dimension (n, p), column corresponds observed trajectory variable. Rows align obs_time. obs_time numeric vector length n representing observation time points. yy_smth numeric matrix dimension (length(tt), p), column contains smoothed trajectory variable evaluated tt. typically output kernelODE_step1(). tt numeric vector representing finer time grid used evaluating smoothed trajectories derivatives. kernel Kernel function use. kernel_params list length p, element named list parameters specific variable (e.g., list(bandwidth = 1) Gaussian kernel). list length 1, parameter set used variables. typically output auto_select_kernel_params(). interaction_term logical value specifying whether include interaction effects model. adj_matrix adjacency matrix (p × p) representing regulatory network use refitting. Entry (k, j) = 1 indicates variable k regulates variable j. Typically obtained previous Kernel ODE estimation. NULL, defaults fully connected network. Although technically possible, function intended estimating \\(F_j\\) inferring regulatory network. theta_initial numeric matrix containing initial \\(\\theta_j\\) values variable start optimization: interaction_term = FALSE, theta_initial must dimensions (p, p). interaction_term = TRUE, theta_initial must dimensions (p^2, p). NULL, defaults ones. nzero_thres number 0, 1 specifying maximum proportion nonzero regulators (edges) allowed variable (.e., p * nzero_thres regulators). used adj_matrix NULL. provides faster alternative computationally expensive pruning process. tol Convergence tolerance relative improvement Frobenius norm \\(\\theta\\) matrix. max_iter Maximum number iterations optimization. verbose Integer; greater 0, prints progress messages optimization.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/refit_kernel_ODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refit Kernel ODE with a Given Regulatory Network — refit_kernel_ODE","text":"list components: metrics Recovery metrics trajectories given network, including overall \\(R^2\\) variable-specific \\(R^2\\) values. See assess_recov_traj(). Y_refit Recovered trajectories refitted model, format Y.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/theta_to_adj_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert theta Coefficients to Regulatory Network — theta_to_adj_matrix","title":"Convert theta Coefficients to Regulatory Network — theta_to_adj_matrix","text":"Converts estimated theta coefficients (\\(\\theta_j\\)'s) adjacency matrix representing regulatory network variables. Currently, non-interaction model (interaction = FALSE) supported.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/theta_to_adj_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert theta Coefficients to Regulatory Network — theta_to_adj_matrix","text":"","code":"theta_to_adj_matrix(interaction_term, res_theta)"},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/theta_to_adj_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert theta Coefficients to Regulatory Network — theta_to_adj_matrix","text":"interaction_term logical value specifying whether include interaction effects model. res_theta numeric matrix whose columns contain estimated \\(\\theta_j\\) values variable. interaction_term = FALSE, res_theta must dimensions (p, p). interaction_term = TRUE, res_theta must dimensions (p^2, p).","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/theta_to_adj_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert theta Coefficients to Regulatory Network — theta_to_adj_matrix","text":"numeric adjacency matrix dimension (p, p) representing regulatory network, 1 indicates regulatory effect 0 indicates none. interaction_term = TRUE, fully connected network returned warning.","code":""},{"path":"https://github.com/WenbinWu2001/ODEinherit/reference/theta_to_adj_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert theta Coefficients to Regulatory Network — theta_to_adj_matrix","text":"","code":"set.seed(1) p <- 3 theta_mat <- matrix(runif(p^2) * rbinom(p^2, 1, 0.5), nrow = p, ncol = p) theta_to_adj_matrix(interaction_term = FALSE, res_theta = theta_mat) #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    0    0    1 #> [3,]    0    1    1"}]
