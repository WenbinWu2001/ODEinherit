% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kernel_functions.R
\name{kernel_functions}
\alias{kernel_functions}
\alias{linear_kernel}
\alias{polynomial_kernel}
\alias{gaussian_kernel}
\alias{matern_kernel}
\title{Kernel Functions}
\usage{
linear_kernel(y1, y2)

polynomial_kernel(y1, y2, intercept, degree)

gaussian_kernel(y1, y2, bandwidth)

matern_kernel(y1, y2, lengthscale)
}
\arguments{
\item{y1}{A numeric vector.}

\item{y2}{A numeric vector of the same length as \code{y1}.}

\item{intercept}{Numeric intercept \eqn{c}.}

\item{degree}{Non-negative integer degree \eqn{d}.}

\item{bandwidth}{Positive numeric bandwidth \eqn{\sigma}.}

\item{lengthscale}{Positive numeric lengthscale \eqn{\ell}.}
}
\value{
A numeric vector of length \code{length(y1)} giving the kernel values for
each pair of corresponding elements in \code{y1} and \code{y2}.
}
\description{
Computes common kernel functions \emph{elementwise} for two equal-length numeric
vectors. Each function is vectorized: the result at position \emph{i} depends only
on \code{y1[i]} and \code{y2[i]}.
}
\details{
The following kernels are provided:
\itemize{
\item \strong{Linear}: \deqn{K(y_1, y_2) = y_1 y_2}
\item \strong{Polynomial}: \deqn{K(y_1, y_2) = (y_1 y_2 + c)^{d},}
with intercept \eqn{c \in \mathbb{R}} and degree \eqn{d \in \mathbb{N}_0}.
\item \strong{Gaussian (RBF)}: \deqn{K(y_1, y_2) = \exp\left(-\frac{(y_1 - y_2)^2}{2 \sigma^2}\right),}
where \eqn{\sigma} is the bandwidth.
\item \strong{Matern (\eqn{\nu = 3/2})}:
\deqn{K(y_1, y_2) = \left(1 + \frac{\sqrt{3} |y_1 - y_2|}{\ell}\right) \exp\left(-\frac{\sqrt{3} |y_1 - y_2|}{\ell}\right),}
with lengthscale \eqn{\ell > 0}.
}

Inputs must have the same length; kernel-specific parameters must be valid
(e.g., positive bandwidth/lengthscale, non-negative integer degree). Inputs
containing \code{NA} will yield \code{NA} in the corresponding positions.
}
\examples{
linear_kernel(1:3, 4:6)
polynomial_kernel(1:3, 4:6, intercept = 1, degree = 2)
gaussian_kernel(1:3, 4:6, bandwidth = 1)
matern_kernel(1:3, 4:6, lengthscale = 0.5)

}
